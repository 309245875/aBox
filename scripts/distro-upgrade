#!/bin/bash
# Author: Aniverse
#

script_update=2019.04.03
script_version=1.1.0
lang=chs

######################################################################################################## Usage

usage_guide() {

bash repo.sh --mode inside --ask
bash repo.sh --mode inside --work mirror  --mirror cdn-fastly.deb.debian.org
bash repo.sh --mode inside --work upgrade --system buster

}

######################################################################################################## Colors

black=$(tput setaf 0)   ; red=$(tput setaf 1)          ; green=$(tput setaf 2)   ; yellow=$(tput setaf 3);  bold=$(tput bold)
blue=$(tput setaf 4)    ; magenta=$(tput setaf 5)      ; cyan=$(tput setaf 6)    ; white=$(tput setaf 7) ;  normal=$(tput sgr0)
on_black=$(tput setab 0); on_red=$(tput setab 1)       ; on_green=$(tput setab 2); on_yellow=$(tput setab 3)
on_blue=$(tput setab 4) ; on_magenta=$(tput setab 5)   ; on_cyan=$(tput setab 6) ; on_white=$(tput setab 7)
shanshuo=$(tput blink)  ; wuguangbiao=$(tput civis)    ; guangbiao=$(tput cnorm) ; jiacu=${normal}${bold}
underline=$(tput smul)  ; reset_underline=$(tput rmul) ; dim=$(tput dim)
standout=$(tput smso)   ; reset_standout=$(tput rmso)  ; title=${standout}
baihuangse=${white}${on_yellow}; bailanse=${white}${on_blue} ; bailvse=${white}${on_green}
baiqingse=${white}${on_cyan}   ; baihongse=${white}${on_red} ; baizise=${white}${on_magenta}
heibaise=${black}${on_white}   ; heihuangse=${on_yellow}${black}
CW="${bold}${baihongse} ERROR ${jiacu}";ZY="${baihongse}${bold} ATTENTION ${jiacu}";JG="${baihongse}${bold} WARNING ${jiacu}"

######################################################################################################## Check

distro=$(awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release)
codename=$(cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}')
pm=apt # package manager

[[ $EUID -ne 0 ]] && echo -e "\n${CW} This script must be run as root! \n" && exit 1
[[ ! $distro =~ (Debian|Ubuntu) ]] && echo -e "\n${CW}Only Ubuntu and Debian is supported! \n" && exit 1

######################################################################################################## Options

OPTS=$(getopt -n "$0" -o a --long "inside" -- "$@")
eval set -- "$OPTS"

while true; do
  case "$1" in
    -m | --mode       ) mode=$2 ; shift ; shift ;;
    -d | --display    ) display=$2 ; shift ; shift ;;
    -- ) shift; break ;;
     * ) break ;;
  esac
done

[[ ! $mode =~ (system_upgrade|mirror) ]] && {
[[ $lang == eng ]] && echo -e "${bold}${baihongse} ERROR ${normal} Mode can only be specified as ${underline}system_upgrade${normal} or ${underline}mirror${normal}"
[[ $lang == chs ]] && echo -e "${bold}${baihongse} 错误 ${normal} mode 只能被指定为 ${underline}system_upgrade${normal} 或 ${underline}mirror${normal}"
exit 1 ; }



[[ ! $display =~ (inside|normal) ]] && {
[[ $lang == eng ]] && echo -e "${bold}${baihongse} ERROR ${normal} Mode can only be specified as ${underline}system_upgrade${normal} or ${underline}mirror${normal}"
[[ $lang == chs ]] && echo -e "${bold}${baihongse} 错误 ${normal} mode 只能被指定为 ${underline}system_upgrade${normal} 或 ${underline}mirror${normal}"
exit 1 ; }


#[[ ! $ =~ (|) ]]


[[ $display == inside ]] && output_format=log
[[ $display == normal ]] && output_format=both

[[ $output_format == normal ]] && output=""
[[ $output_format == log    ]] && output="2>&1 >> $OutputLOG"
[[ $output_format == both   ]] && output="2>&1 | tee -a $OutputLOG"
[[ $output_format == none   ]] && output="2>&1 >> /dev/null"

########################################################################################################

OutputLOG=/log/inexistence/update_mirror.txt    # /dev/null
LOCKLocation=/log/inexistence/lock
[[ ! -d $LOCKLocation ]] && mkdir -p $LOCKLocation

export TOP_PID=$$
trap 'exit 1' TERM

function _check_status() {
local LockName=$1
[[ $lang == eng ]] && { DONE=DONE ; FAILED=FAILED ; Unknown_State="Unknown State" ; }
[[ $lang == chs ]] && { DONE=完成 ; FAILED=失败 ; Unknown_State="什么鬼？" ; }
[[   -f /tmp/$LockName.1.lock ]] && echo -e " ${green}${bold}$DONE${normal}"
[[   -f /tmp/$LockName.2.lock ]] && echo -e " ${red}${bold}$FAILED${normal}"
[[ ! -f /tmp/$LockName.1.lock ]] && [[ ! -f /tmp/$LockName.2.lock ]] && echo -e " ${red}${bold}$Unknown_State${normal}" ; }

spinner() {
    local pid=$1
    local delay=0.25
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [${bold}${yellow}%c${normal}]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

########################################################################################################

[[ ! -f /etc/apt/sources.list.bak ]] && cp /etc/apt/sources.list{,.bak}

[[ $codename =~ (wheezy|jessie|stretch|trusty|xenial|bionic|buster) ]] && support=yes
[[ $codename =~ (wheezy|jessie|stretch|trusty|xenial) ]] && upgradable=yes
[[ $codename == wheezy  ]] && { up1=jessie  ; up2=stretch ; up3=buster ; }
[[ $codename == jessie  ]] && { up1=stretch ; up2=buster  ; }
[[ $codename == stretch ]] && { up1=buster  ; }
[[ $codename == trusty  ]] && { up1=xenial  ; up2=bionic  ; }
[[ $codename == xenial  ]] && { up1=bionic  ; }

# Transform codename to version
function c2v() { echo "$1" | sed -e "s/jessie/Debian 8/" -e "s/stretch/Debian 9/" -e "s/buster/Debian 10/" -e "s/trusty/Ubuntu 14.04/" -e "s/xenial/Ubuntu 16.04/" -e "s/bionic/Ubuntu 18.04/" ; }
# Selectable mirror lists
[[ $distro == Debian ]] && [[ ! $codename =~ (wheezy|jessie) ]] && {
offical_mirror="ftp.debian.org"
mirror_url_1="ftp.debian.org"
mirror_url_2="mirrors.aliyun.com"
mirror_url_3="mirrors.163.com"
mirror_url_4="mirrors.ustc.edu.cn"
mirror_url_5="mirrors.mit.edu"
mirror_url_6="cdn-fastly.deb.debian.org"
mirror_url_7="cdn-aws.deb.debian.org"
country=$(wget -qO- http://api.ip.la/en | awk '{print $2}' | tr 'A-Z' 'a-z')
[[ -n $country ]] && mirror_url_8="ftp.$country.debian.org"
}

[[ $distro == Ubuntu ]] && {
offical_mirror="archive.ubuntu.com"
mirror_url_1="archive.ubuntu.com"
mirror_url_2="mirrors.aliyun.com"
mirror_url_3="mirrors.163.com"
mirror_url_4="mirrors.ustc.edu.cn"
mirror_url_5="mirrors.mit.edu"
mirror_url_6="mirrors.ctyun.cn"
}

[[ $codename =~ (wheezy|jessie) ]] && mirror_url_1="snapshot.debian.org" && offical_mirror="snapshot.debian.org"

function get_latency() {
url=$1
latency=$(ping -W 1 -c 3 $url 2>&1 | grep "min/avg/max" | grep -oE "[0-9.]+" | tr '\n' ' ' | awk '{print $2}')
[[ -z $latency ]] && latency=10086
echo $latency
}

########################################################################################################



######################################################################################################## Languages

[[ $lang == eng ]] && {
lang_upgrade_to="Upgrade to"
lang_change_pm_mirror_to="Change $pm mirror to"
lang_what_would_you_like_to_do="What would you like to do?"
lang_restore_from_backup="Restore from backup"
lang_view_the_current_mirror_lists="View the current mirror lists"
lang_do_nothing="Do nothing"
}

[[ $lang == chs ]] && {
lang_upgrade_to="升级到"
lang_change_pm_mirror_to="修改 $pm 所使用的镜像源为"
lang_what_would_you_like_to_do="你打算如何操作？"
lang_restore_from_backup="从备份文件中恢复原先的源"
lang_view_the_current_mirror_lists="查看现在的镜像列表"
lang_do_nothing="不做修改"
}

########################################################################################################



function menu() {

i=0 ; for up_system in $up{1..10} ; do i=$(expr $i + 1)
echo -e "${green}0${i})${normal} $lang_upgrade_to ${cyan}$(c2v $up_system)${normal}"
done

i=0 ; for mirrors in $mirror_url_{1..10} ; do i=$(expr $i + 1)
echo -e "${green}1${i})${normal} $lang_change_pm_mirror_to ${cyan}$mirrors${normal}"
done

echo -e "${green}21)${normal} $lang_restore_from_backup"
echo -e "${green}22)${normal} $lang_view_the_current_mirror_lists"

echo -e "${red}99)${normal} $lang_do_nothing"
echo -ne "${bold}${yellow}$lang_what_would_you_like_to_do${normal} " ; read -e responce ; echo

menu_responce
}

function menu_responce() {
case $responce in
    01 | 1 ) codename=$up1   ; disrto_upgrade ;;
    02 | 2 ) codename=$up2   ; disrto_upgrade ;;
    03 | 3 ) codename=$up3   ; disrto_upgrade ;;
    11) mirror=$mirror_url_1 ; change_mirror ;;
    12) mirror=$mirror_url_2 ; change_mirror ;;
    13) mirror=$mirror_url_3 ; change_mirror ;;
    14) mirror=$mirror_url_4 ; change_mirror ;;
    15) mirror=$mirror_url_5 ; change_mirror ;;
    16) mirror=$mirror_url_6 ; change_mirror ;;
    17) mirror=$mirror_url_7 ; change_mirror ;;
    18) mirror=$mirror_url_8 ; change_mirror ;;
    19) mirror=$mirror_url_9 ; change_mirror ;;
    21) restore_from_backup  ;;
    22) cat_sources ;;
esac
}




function package_manager_update() {
if [[ $pm == apt ]]; then
    [[ $lang == chs ]] && echo -e "${bold}${green}尝试更新源 ...${normal}"
    [[ $lang == eng ]] && echo -e "${bold}${green}Try to update ...${normal}"
    apt-get update
elif [[ $pm == yum ]]; then
    yum makecache
fi
}




function restore_from_backup() {
if [[ -f /etc/apt/sources.list.bak ]]; then
    mv -f /etc/apt/sources.list.bak /etc/apt/sources.list
    
else 
    [[ $lang == chs ]] && echo -e "\n${bold}${baihongse} 错误 ${jiacu} 不存在备份文件，因此无法恢复。${normal}\n"
    [[ $lang == eng ]] && echo -e "\n${CW} There is no backup exists.${normal}\n"
fi
}

function cat_sources() {
echo -e "----------------------- ${green}/etc/apt/sources.list${normal} -----------------------\n"
cat /etc/apt/sources.list
[[ -f /etc/apt/sources.list.bak ]] && {
echo -e "\n--------------------- ${green}/etc/apt/sources.list${red}.bak${normal} ---------------------\n"
cat /etc/apt/sources.list.bak ; }
echo -e "\n---------------------------------------------------------------------\n"
}


############################################################################################### mirror_change


function change_mirror() {
[[ $(get_latency $mirror) == 10086 ]] && echo -e "${CW} $mirror is not reachable! ${normal}" && unset $mirror
[[ -z $mirror ]] && echo -e "${CW}No available mirror input! ${normal}" && exit 1

[[ $distro == Debian ]] && repo_debian && source_type="main non-free contrib"
[[ $distro == Ubuntu ]] && repo_ubuntu && source_type="main restricted universe multiverse"
[[ $codename =~ (wheezy|jessie) ]] && repo_old_debian
apt-get update
[ $? -le '1' ] && echo -e "${green}Success!${normal}" || { echo -e "${red}Something went wrong :(${normal}" ; failed=yes ; }
[[ $mode == inside ]] && offical_mirror
}

function repo_debian() {
cat > /etc/apt/sources.list << EOF
deb http://$mirror/debian/ $codename $source_type
deb http://$mirror/debian/ $codename-updates $source_type
deb http://$mirror/debian/ $codename-backports $source_type
deb-src http://$mirror/debian/ $codename $source_type
deb-src http://$mirror/debian/ $codename-updates $source_type
deb-src http://$mirror/debian/ $codename-backports $source_type
EOF
}

function repo_old_debian() {
cat > /etc/apt/sources.list << EOF
deb http://snapshot.debian.org/archive/debian/20190321T212815Z/ $codename $source_type
deb http://snapshot.debian.org/archive/debian/20190321T212815Z/ $codename-updates $source_type
deb http://snapshot.debian.org/archive/debian/20190321T212815Z/ $codename-backports $source_type
deb-src http://snapshot.debian.org/archive/debian/20190321T212815Z/ $codename $source_type
deb-src http://snapshot.debian.org/archive/debian/20190321T212815Z/ $codename-updates $source_type
deb-src http://snapshot.debian.org/archive/debian/20190321T212815Z/ $codename-backports $source_type
EOF
# https://unix.stackexchange.com/questions/2544/how-to-work-around-release-file-expired-problem-on-a-local-mirror
# apt-get -o Acquire::Check-Valid-Until=false update
echo 'Acquire::Check-Valid-Until 0;' > /etc/apt/apt.conf.d/10-no-check-valid-until
}

function repo_ubuntu() {
cat > /etc/apt/sources.list << EOF
deb http://$mirror/ubuntu/ $codename $source_type
deb http://$mirror/ubuntu/ $codename-security $source_type
deb http://$mirror/ubuntu/ $codename-updates $source_type
deb http://$mirror/ubuntu/ $codename-backports $source_type
deb-src http://$mirror/ubuntu/ $codename $source_type
deb-src http://$mirror/ubuntu/ $codename-security $source_type
deb-src http://$mirror/ubuntu/ $codename-updates $source_type
deb-src http://$mirror/ubuntu/ $codename-backports $source_type
EOF
}


############################################################################################### Dist Upgrade
# https://serverfault.com/questions/48724/100-non-interactive-debian-dist-upgrade

function distro_upgrade_upgrade() {
echo -e "\n\n\n${baihongse}executing upgrade${normal}\n\n\n"
apt-get --force-yes -o Dpkg::Options::="--force-confnew" --force-yes -o Dpkg::Options::="--force-confdef" -fuy upgrade

echo -e "\n\n\n${baihongse}executing dist-upgrade${normal}\n\n\n"
apt-get --force-yes -o Dpkg::Options::="--force-confnew" --force-yes -o Dpkg::Options::="--force-confdef" -fuy dist-upgrade ; }



function _distro_upgrade() {

export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none

#starttime=$(date +%s)

echo -e "\n${baihongse}executing apt-listchanges remove${normal}\n"
apt-get remove apt-listchanges --assume-yes --force-yes

echo 'libc6 libraries/restart-without-asking boolean true' | debconf-set-selections

echo -e "${baihongse}executing apt sources change${normal}\n"
sed -i "s/$codename/$UPGRADE_CODENAME/g" /etc/apt/sources.list

echo -e "${baihongse}executing autoremove${normal}\n"
apt-get -fuy --force-yes autoremove

echo -e "${baihongse}executing clean${normal}\n"
apt-get --force-yes clean



echo -e "${baihongse}executing update${normal}\n"
cp /etc/apt/sources.list /etc/apt/sources.list."$(date "+%Y.%m.%d.%H.%M.%S")".bak
wget --no-check-certificate -O /etc/apt/sources.list https://github.com/Aniverse/inexistence/raw/master/00.Installation/template/$DISTROL.apt.sources
[[ $DISTROL == debian ]] && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5C808C2B65558117

if [[ $UPGRDAE2 == Yes ]]; then
    sed -i "s/RELEASE/${UPGRADE_CODENAME_1}/g" /etc/apt/sources.list
    apt-get -y update
    _distro_upgrade_upgrade
    sed -i "s/${UPGRADE_CODENAME_1}/${UPGRADE_CODENAME_2}/g" /etc/apt/sources.list
    apt-get -y update
else
    sed -i "s/RELEASE/${UPGRADE_CODENAME}/g" /etc/apt/sources.list
    apt-get -y update
fi

_distro_upgrade_upgrade

timeWORK=upgradation
echo -e "\n\n\n" ; _time

[[ ! $DeBUG == 1 ]] && echo -e "\n\n ${shanshuo}${baihongse}Reboot system now. You need to rerun this script after reboot${normal}\n\n\n\n\n"

sleep 5
reboot -f
init 6

sleep 5
kill -s TERM $TOP_PID
exit 0 ; 
}


function ask_distro_upgrade() {

[[ $CODENAME =~ (wheezy|jessie|trusty|xenial) ]] && echo -e "\nYou are now running ${cyan}${bold}$DISTRO $osversion${normal}"
[[ $CODENAME =~ (wheezy|jessie) ]] && { UPGRADE_DISTRO_1="Debian 8"     ; UPGRADE_DISTRO_2="Debian 9"     ; UPGRADE_CODENAME_1=jessie ; UPGRADE_CODENAME_2=stretch ; }
[[ $CODENAME =~ (trusty|xenial) ]] && { UPGRADE_DISTRO_1="Ubuntu 16.04" ; UPGRADE_DISTRO_2="Ubuntu 18.04" ; UPGRADE_CODENAME_1=xenial ; UPGRADE_CODENAME_2=bionic  ; }
echo
echo -e "${green}01)${normal} Upgrade to ${cyan}$UPGRADE_DISTRO_1${normal} (Default)"
echo -e "${green}02)${normal} Upgrade to ${cyan}$UPGRADE_DISTRO_2${normal}"
echo -e "${green}03)${normal} Do NOT upgrade system and exit script"
echo -ne "${bold}${yellow}Would you like to upgrade your system?${normal} (Default ${cyan}01${normal}): " ; read -e responce

case $responce in
    01 | 1 | "") distro_up=Yes && UPGRADE_CODENAME=$UPGRADE_CODENAME_1  && UPGRADE_DISTRO=$UPGRADE_DISTRO_1                 ;;
    02 | 2     ) distro_up=Yes && UPGRADE_CODENAME=$UPGRADE_CODENAME_2  && UPGRADE_DISTRO=$UPGRADE_DISTRO_2 && UPGRDAE2=Yes ;;
    03 | 3     ) distro_up=No                                                                                               ;;
    *          ) distro_up=Yes && UPGRADE_CODENAME=$UPGRADE_CODENAME_2  && UPGRADE_DISTRO=$UPGRADE_DISTRO_1                 ;;
esac

if [[ $distro_up == Yes ]]; then
    echo -e "\n${bold}${baiqingse}Your system will be upgraded to ${baizise}${UPGRADE_DISTRO}${baiqingse} after reboot${normal}"
    _distro_upgrade | tee /etc/00.distro_upgrade.log
else
    echo -e "\n${baizise}Your system will ${baihongse}not${baizise} be upgraded${normal}"
fi

echo ; }


###############################################################################################

function unused_codes() {

$(c2v $up_system)

# https://www.debian.org/mirror/list
country=$(wget -qO- http://api.ip.la/en | awk '{print $2}' | tr 'A-Z' 'a-z')
mirror_country=$(echo ftp.$country.debian.org)
get_latency $mirror_country
[[ $latency == 0 ]] && echo -e "This mirror is not reachable! "

i=0 ; for ccc in $up{1..10}c ; do
    i=$(expr $i + 1)
    eval codename2version up${i} $ccc
done
}

function codename2version() { eval $1=$(echo "$2" | sed -e "s/jessie/Debian__8/" -e "s/stretch/Debian__9/" -e "s/buster/Debian__10/" -e "s/trusty/Ubuntu__14.04/" -e "s/xenial/Ubuntu__16.04/" -e "s/bionic/Ubuntu__18.04/") ; }

